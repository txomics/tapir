# Statistical testing

Downloading Glinos *et al.* dataset (GTEx, PTBP1 knockdown)

```{r}
#| eval: false
library(here)
# https://drive.google.com/file/d/1ATHgwFlIMmI651C5TYtiBxm2atTvbBYn/view?usp=sharing
# counts
url <- "https://drive.google.com/uc?export=download&id=1ATHgwFlIMmI651C5TYtiBxm2atTvbBYn"
filename <- "quantification_flair_filter.counts.txt.gz"
path <- here("data", filename)
if (!file.exists(path)) {
  download.file(url, path)
}
# GTF
url <- "https://drive.google.com/uc?export=download&id=1S0TRXoXsfnXwJ0Dh5bLqVmyvFAAALFMU"
filename <- "flair_filter_transcripts.gtf.gz"
path <- here("data", filename)
if (!file.exists(path)) {
  download.file(url, path)
}
# metadata
url <- "https://drive.google.com/uc?export=download&id=1LpYPXXhMtUV3vMG7SMLV69-JxZfc59o2"
filename <- "glinos_metadata.csv"
path <- here("data", filename)
if (!file.exists(path)) {
  download.file(url, path)
}
```

Assembling the object:

```{r}
#| eval: false
library(readr)
library(dplyr)
library(stringr)
counts <- read_delim(here("data", "quantification_flair_filter.counts.txt.gz"))
meta <- read_delim(here("data", "glinos_metadata.csv"))
colnames(meta)[10] <- "total_reads"
meta <- meta |>
  mutate(condition = str_extract(sample_id, "(ctrl|exp)")) |>
  select(sample_id, sample_name, condition, contains("read") | contains("3_prime")) |>
  arrange(condition, sample_name)

rnames <- counts$transcript
counts <- as.matrix(counts[,meta$sample_id]) # subset to the knockdown
rownames(counts) <- rnames
```

```{r}
#| eval: false
library(SummarizedExperiment)
se <- SummarizedExperiment(list(counts = counts),
                           colData = meta)
saveRDS(se, file=here("data", "glinos_se.rds"))
```

```{r}
#| message: false
library(here)
library(SummarizedExperiment)
se <- readRDS(here("data", "glinos_se.rds"))
keep <- rowSums(assay(se) >= 10) >= 6
table(keep)
se <- se[keep,]
```

```{r}
#| include: false
if (tryCatch(packageVersion("tximeta") < "1.25.1", error = function(e) TRUE)) {
  message("installing dev version of tximeta")
  remotes::install_github("thelovelab/tximeta")
}
set.seed(5) # for jittered plots
```

```{r}
#| message: false
library(DESeq2)
library(tximeta)
library(stringr)
colsums <- colSums(assay(se, "counts"))
cpm <- t(t(assay(se, "counts")) / colsums * 1e6)
assay(se, "abundance") <- cpm
assay(se, "length", withDimnames=FALSE) <- matrix(1000, nrow=nrow(se), ncol=ncol(se))
se$condition <- factor(se$condition, c("ctrl","exp"))
se_sub <- se[grepl("ENSG",rownames(se)),]
tx2gene <- DataFrame(txid = rownames(se_sub),
                     geneid = str_extract(rownames(se_sub), ".*_(ENSG.*)$", group=1))
gse <- summarizeToGene(se_sub, tx2gene = tx2gene, skipRanges=TRUE)
#saveRDS(gse, file=here("data","glinos_gene_counts.rds"))
```

```{r PCA}
dds <- DESeqDataSet(gse, ~condition)
keep <- rowSums(counts(dds) >= 10) >= 6
table(keep)
dds <- DESeq(dds, minRep=Inf)
res <- results(dds, cooksCutoff=FALSE)
summary(res)
```

```{r glinos-plotcounts}
library(org.Hs.eg.db)
gene_anno <- DataFrame(geneid = str_extract(rownames(dds), "(ENSG.*)\\..*", group=1),
                       baseMean = round(rowData(dds)$baseMean))
gene_anno$symbol <- org.Hs.eg.db |> mapIds(gene_anno$geneid, "SYMBOL", "ENSEMBL")
gene_anno$symbol[is.na(gene_anno$symbol)] <- gene_anno$geneid[is.na(gene_anno$symbol)]
rowData(dds)$symbol <- gene_anno$symbol
idx <- which(rowData(dds)$symbol == "PTBP1")
plotCounts(dds, gene=idx)
```

```{r glinos-pca}
vsd <- vst(dds, blind=FALSE)
plotPCA(vsd)
```

```{r}
#saveRDS(dds, file=here("data", "glinos_deseq2_gene.rds"))
#saveRDS(vsd, file=here("data", "glinos_vst_gene.rds"))
```

```{r}
#| eval: false
library(Glimma)
g <- glimmaMA(
  dds,
  groups=dds$condition,
  anno=gene_anno[,-1],
  main="Glinos et al. (2022) - PTBP1 knockdown", # title above left summary plot
  transform.counts="cpm",
  test="Wald", name="condition_exp_vs_ctrl",
  independentFiltering=FALSE,
  cooksCutoff=FALSE
)
htmlwidgets::saveWidget(g, here("data","glinos_ma-plot.html"))
```

```{r}
# DTU filter
se <- se_sub # removed txps not associated with genes
rowData(se)$gene_id <- tx2gene[,"geneid"]
```

```{r}
#| message: false
library(plyxp)
xp <- se |>
  new_plyxp()
xp <- xp |>
  mutate(rows(gene = str_extract(gene_id, "(ENSG.*)\\..*", group=1),
              symbol = mapIds(org.Hs.eg.db, gene, "SYMBOL", "ENSEMBL"),
              symbol = dplyr::case_when(
                is.na(symbol) ~ gene,
                TRUE ~ symbol
              )))
tab <- table(rowData(se)$gene_id)
one_isoform_gene <- names(tab)[ tab == 1]
xp <- xp |>
  filter(rows(!gene_id %in% one_isoform_gene)) |>
  arrange(rows(gene_id))
```

```{r}
head(table(table(rowData(xp)$gene_id))) # confirm no single isoform genes
```

```{r}
se <- se(xp)
# needed for satuRn
rowData(se)$isoform_id <- rownames(se)
```

```{r}
# 5 seconds
library(satuRn)
se <- satuRn::fitDTU(se, formula=~0 + condition)
```

```{r}
design <- model.matrix(~0 + condition, colData(se))
colnames(design)
colnames(design) <- levels(se$condition)
L <- limma::makeContrasts(
  exp_vs_ctrl = exp - ctrl,
  levels = design
)
L # contrast matrix
```

```{r saturn-test}
se <- satuRn::testDTU(
  object = se,
  contrasts = L,
  diagplot1 = TRUE,
  diagplot2 = TRUE
)
#saveRDS(se, file=here("data","glinos_saturn_dtu.rds"))
```

```{r}
sig_res <- rowData(se)[["fitDTUResult_exp_vs_ctrl"]] |>
  tibble::as_tibble() |>
  dplyr::bind_cols(as.data.frame(rowData(se)[,1:4])) |>
  dplyr::filter(empirical_FDR < .1) |>
  dplyr::select(gene_id, isoform_id, symbol, estimates, empirical_pval, empirical_FDR) |>
  dplyr::arrange(empirical_pval)
#write.csv(sig_res, file=here("data","glinos_saturn_dtu.csv"), quote=FALSE, row.names=FALSE)
sig_res
```

```{r}
cpm <- assay(se, "abundance")[rowData(se)$symbol == "PDLIM7",]
rownames(cpm) <- seq_len(nrow(cpm))
colnames(cpm) <- se$condition
round(cpm)
```

```{r}
library(GenomicFeatures)
#txdb <- makeTxDbFromGFF(here("data","flair_filter_transcripts.gtf.gz"))
#saveDb(txdb, file=here("data","flair_filter_transcripts.sqlite"))
txdb <- loadDb(here("data","flair_filter_transcripts.sqlite"))
exons <- exonsBy(txdb, by="tx")
txps <- AnnotationDbi::select(txdb, keys(txdb, "TXID"), c("TXNAME","GENEID"), "TXID") |>
  tibble::as_tibble() |>
  dplyr::mutate(TXID = as.character(TXID))
```

Now we have to do a little metadata cleanup to make everything easy to compare.

First we clean up the isoform identifiers:

```{r}
sig_res <- sig_res |>
  mutate(
    isoform_id = str_replace(isoform_id, "(_ENSG.*?)_ENSG.*","\\1"),
    isoform_id = str_replace(isoform_id, "(ENST.*?)_ENSG.*","\\1")
  )
```

Next change the names of the exons:

```{r}
length(exons)
all.equal(names(exons), txps$TXID)
names(exons) <- txps$TXNAME
```

```{r}
#| eval: false
library(plyranges)
upstr <- e[[pos_coef_txps]] |>
  filter_by_non_overlaps(e[[neg_coef_txps]]) |>
  flank_upstream(100)
```

```{r}
#| eval: false
library(Biostrings)
library(BSgenome)
library(BSgenome.Hsapiens.UCSC.hg38)
Hsapiens |>
  getSeq(upstr) |>
  RNAStringSet()
```

```{r}
sessionInfo()
```